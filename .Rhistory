gam.check(EGRmdl)
plot(EGRmdl)
dredge(EGRmdl)
draw(EGRmdl,residuals=TRUE)
EGR_pb_obj<-plot(EGRmdl,residuals=TRUE,rug=TRUE,se=TRUE,pages=0,select=1,scale=0,
n=500,n2=40,n3=3,theta=30,phi=30,jit=FALSE,xlab=NULL,
ylab=NULL,main=NULL,ylim=NULL,xlim=NULL,too.far=0.1,
all.terms=FALSE,shade=TRUE,shade.col="gray80",shift=coef(EGRmdl)[1],
trans=I,seWithMean=FALSE,unconditional=FALSE,by.resids=FALSE,
scheme=0)
EGR_pb_obj2<-plot(EGRmdl,residuals=TRUE,rug=TRUE,se=TRUE,pages=0,select=2,scale=0,
n=500,n2=40,n3=3,theta=30,phi=30,jit=FALSE,xlab=NULL,
ylab=NULL,main=NULL,ylim=NULL,xlim=NULL,too.far=0.1,
all.terms=FALSE,shade=TRUE,shade.col="gray80",shift=coef(EGRmdl)[2],
trans=I,seWithMean=FALSE,unconditional=FALSE,by.resids=FALSE,
scheme=0)
EGR_pb_obj <- EGR_pb_obj[[1]] # just one smooth so select the first component
EGR_pb_df <- as.data.frame(EGR_pb_obj[c("x", "se", "fit")])
EGR_pb_df <- EGR_pb_df %>%
rename(GGBMed = x) %>%
mutate(fit = fit + coef(EGRmdl)[1])
Tracks<-read.csv('Data/Tracks_GGBDist.csv')
Tracks<-Tracks %>%
mutate(across(c('SealID','TOPPID','Skip','Colony','Season'),as.factor)) %>%
left_join(select(GGB_Pct, TOPPID, Pct250km), by = "TOPPID")%>%
filter(QCFlag<4) %>%
filter(Year<=2020) %>%
group_by(TOPPID) %>%
# filter(max(DayOfTrip) >= 30) %>%
mutate(Year = first(Year),
PctTrip = max(DayOfTripR)/max(TripLength)) %>%
ungroup() %>%
#Only include tracks lasting more than 60% of time at sea
filter(PctTrip>0.6 | is.na(PctTrip)) %>%
mutate(LatDist = (Lat-43)*111,
fYear = as.factor(Year),
# Drop excess seal and TOPPID levels
TOPPID = droplevels(TOPPID),
SealID = droplevels(SealID))
Tracks<-Tracks %>%
mutate(across(c('SealID','TOPPID','Skip','Colony','Season'),as.factor)) %>%
left_join(select(GGB_Pct, TOPPID, Pct250km), by = "TOPPID")%>%
left_join(select(All_Females, TOPPID, TripLength, PctBathy1200,MedDistCoast,MedDistCoast230), by = "TOPPID") %>%
filter(QCFlag<4) %>%
filter(Year<=2020) %>%
group_by(TOPPID) %>%
# filter(max(DayOfTrip) >= 30) %>%
mutate(Year = first(Year),
PctTrip = max(DayOfTripR)/max(TripLength)) %>%
ungroup() %>%
#Only include tracks lasting more than 60% of time at sea
filter(PctTrip>0.6 | is.na(PctTrip)) %>%
mutate(LatDist = (Lat-43)*111,
fYear = as.factor(Year),
# Drop excess seal and TOPPID levels
TOPPID = droplevels(TOPPID),
SealID = droplevels(SealID))
Tracks<-Tracks %>%
mutate(across(c('SealID','TOPPID','Skip','Colony','Season'),as.factor)) %>%
left_join(select(GGB_Pct, TOPPID, Pct250km), by = "TOPPID")%>%
left_join(select(All_Females, TOPPID, TripLength, PctBathy1200,MedDistCoast), by = "TOPPID") %>%
filter(QCFlag<4) %>%
filter(Year<=2020) %>%
group_by(TOPPID) %>%
# filter(max(DayOfTrip) >= 30) %>%
mutate(Year = first(Year),
PctTrip = max(DayOfTripR)/max(TripLength)) %>%
ungroup() %>%
#Only include tracks lasting more than 60% of time at sea
filter(PctTrip>0.6 | is.na(PctTrip)) %>%
mutate(LatDist = (Lat-43)*111,
fYear = as.factor(Year),
# Drop excess seal and TOPPID levels
TOPPID = droplevels(TOPPID),
SealID = droplevels(SealID))
Track_Stats <- Tracks %>%
filter(Lon360<230) %>%
group_by(TOPPID) %>%
summarize(GGBMed = median(GGBDist),
GGBMAD = mad(GGBDist),
GGBIQR = IQR(GGBDist),
SealID = first(SealID),
EnergyGainRate = first(EnergyGainRate),
Season = first(Season),
Skip = first(Skip),
MassGainRate = first(MassGainRate),
StdLength = first(StdLength),
Year = first(Year),
fYear = first(fYear),
Pct250km = first(Pct250km)) %>%
filter(!is.na(EnergyGainRate)) %>%
#filter(Pct250km > 0.10) %>%
left_join(select(FS_DailyAll,TOPPID,TotEnergyRate),by="TOPPID") %>%
left_join(select(dens_maxima_TOPPID,TOPPID,GGBMode),by="TOPPID") %>%
filter(!is.na(EnergyGainRate))
EGRmdl <- gam(EnergyGainRate ~ s(GGBMode, k=6) + s(fYear, bs='re'), data=PBMdlData, na.action = "na.fail",method="REML")
summary(EGRmdl)
gam.check(EGRmdl)
plot(EGRmdl)
dredge(EGRmdl)
draw(EGRmdl,residuals=TRUE)
EGR_pb_obj<-plot(EGRmdl,residuals=TRUE,rug=TRUE,se=TRUE,pages=0,select=1,scale=0,
n=500,n2=40,n3=3,theta=30,phi=30,jit=FALSE,xlab=NULL,
ylab=NULL,main=NULL,ylim=NULL,xlim=NULL,too.far=0.1,
all.terms=FALSE,shade=TRUE,shade.col="gray80",shift=coef(EGRmdl)[1],
trans=I,seWithMean=FALSE,unconditional=FALSE,by.resids=FALSE,
scheme=0)
EGR_pb_obj2<-plot(EGRmdl,residuals=TRUE,rug=TRUE,se=TRUE,pages=0,select=2,scale=0,
n=500,n2=40,n3=3,theta=30,phi=30,jit=FALSE,xlab=NULL,
ylab=NULL,main=NULL,ylim=NULL,xlim=NULL,too.far=0.1,
all.terms=FALSE,shade=TRUE,shade.col="gray80",shift=coef(EGRmdl)[2],
trans=I,seWithMean=FALSE,unconditional=FALSE,by.resids=FALSE,
scheme=0)
EGR_pb_obj <- EGR_pb_obj[[1]] # just one smooth so select the first component
EGR_pb_df <- as.data.frame(EGR_pb_obj[c("x", "se", "fit")])
EGR_pb_df <- EGR_pb_df %>%
rename(GGBMed = x) %>%
mutate(fit = fit + coef(EGRmdl)[1])
PBMdlData<-subset(Track_Stats, Season == 'Post-Breeding')
MGRmdl <- gam(MassGainRate ~ s(GGBMode, k=7)+ s(GGBIQR, k=12) + s(StdLength, k=12) + s(fYear, bs='re')  + s(SealID, bs='re'), data=PBMdlData, na.action = "na.fail")
summary(MGRmdl)
gam.check(MGRmdl)
plot(MGRmdl)
dredge(MGRmdl)
MGRmdl <- gam(MassGainRate ~  s(GGBMode, k=7)+ s(GGBIQR, k=7) + StdLength, data=PBMdlData, na.action = "na.fail")
summary(MGRmdl)
gam.check(MGRmdl)
plot(MGRmdl)
dredge(MGRmdl)
MGR_pb_obj<-plot(MGRmdl,residuals=TRUE,rug=TRUE,se=TRUE,pages=0,select=1,scale=0,
n=500,n2=40,n3=3,theta=30,phi=30,jit=FALSE,xlab=NULL,
ylab=NULL,main=NULL,ylim=NULL,xlim=NULL,too.far=0.1,
all.terms=FALSE,shade=TRUE,shade.col="gray80",shift=coef(MGRmdl)[1],
trans=I,seWithMean=FALSE,unconditional=FALSE,by.resids=FALSE,
scheme=0)
MGR_pb_obj <- MGR_pb_obj[[1]] # just one smooth so select the first component
MGR_pb_df <- as.data.frame(MGR_pb_obj[c("x", "se", "fit")])
MGR_pb_df <- MGR_pb_df %>%
rename(GGBMed = x) %>%
mutate(fit = fit + coef(MGRmdl)[1])
EGRmdl <- gam(EnergyGainRate ~ s(GGBMode, k=12)+ s(GGBIQR, k=12) + s(StdLength, k=1)  + s(fYear, bs='re') + s(SealID, bs='re'), data=PMMdlData, na.action = "na.fail")
PMMdlData<-subset(Track_Stats, Skip == 'Breeding')
EGRmdl <- gam(EnergyGainRate ~ s(GGBMode, k=12)+ s(GGBIQR, k=12) + s(StdLength, k=1)  + s(fYear, bs='re') + s(SealID, bs='re'), data=PMMdlData, na.action = "na.fail")
summary(EGRmdl)
gam.check(EGRmdl)
plot(EGRmdl)
EGRmdl <- gam(EnergyGainRate ~ GGBMode + s(GGBIQR) + s(StdLength) + s(fYear, bs='re') , data=PMMdlData, na.action = "na.fail")
summary(EGRmdl)
gam.check(EGRmdl)
plot(EGRmdl)
dredge(EGRmdl)
draw(EGRmdl, residuals = TRUE)
EGR_pm_obj<-plot(EGRmdl,residuals=TRUE,rug=TRUE,se=TRUE,pages=0,select=1,scale=0,
n=500,n2=40,n3=3,theta=30,phi=30,jit=FALSE,xlab=NULL,
ylab=NULL,main=NULL,ylim=NULL,xlim=NULL,too.far=0.1,
all.terms=FALSE,shade=TRUE,shade.col="gray80",shift=coef(EGRmdl)[1],
trans=I,seWithMean=FALSE,unconditional=FALSE,by.resids=FALSE,
scheme=0)
EGR_pm_obj <- EGR_pm_obj[[1]] # just one smooth so select the first component
EGR_pm_df <- as.data.frame(EGR_pm_obj[c("x", "se", "fit")])
EGR_pm_df <- EGR_pm_df %>%
rename(GGBIQR = x) %>%
mutate(fit = fit + coef(EGRmdl)[1])
EGRmdl <- gam(EnergyGainRate ~ s(GGBIQR) + s(StdLength) + s(fYear, bs='re') , data=PMMdlData, na.action = "na.fail")
summary(EGRmdl)
gam.check(EGRmdl)
plot(EGRmdl)
EGRmdl <- gam(EnergyGainRate ~ GGBIQR + s(StdLength) + s(fYear, bs='re') , data=PMMdlData, na.action = "na.fail")
summary(EGRmdl)
gam.check(EGRmdl)
plot(EGRmdl)
dredge(EGRmdl)
gam.check(EGRmdl)
EGRmdl <- gam(EnergyGainRate ~ s(GGBIQR) + s(GGBMode) + s(StdLength), data=PMMdlData, na.action = "na.fail")
summary(EGRmdl)
gam.check(EGRmdl)
plot(EGRmdl)
dredge(EGRmdl)
draw(EGRmdl, residuals = TRUE)
EGRmdl <- gam(EnergyGainRate ~ GGBIQR + GGBMode + s(StdLength), data=PMMdlData, na.action = "na.fail")
summary(EGRmdl)
gam.check(EGRmdl)
plot(EGRmdl)
dredge(EGRmdl)
draw(EGRmdl, residuals = TRUE)
summary(EGRmdl)
EGR_pm_obj<-plot(EGRmdl,residuals=TRUE,rug=TRUE,se=TRUE,pages=0,select=1,scale=0,
n=500,n2=40,n3=3,theta=30,phi=30,jit=FALSE,xlab=NULL,
ylab=NULL,main=NULL,ylim=NULL,xlim=NULL,too.far=0.1,
all.terms=FALSE,shade=TRUE,shade.col="gray80",shift=coef(EGRmdl)[1],
trans=I,seWithMean=FALSE,unconditional=FALSE,by.resids=FALSE,
scheme=0)
EGR_pm_obj <- EGR_pm_obj[[1]] # just one smooth so select the first component
EGR_pm_df <- as.data.frame(EGR_pm_obj[c("x", "se", "fit")])
EGR_pm_df <- EGR_pm_df %>%
rename(GGBIQR = x) %>%
mutate(fit = fit + coef(EGRmdl)[1])
EGRmdl <- gam(EnergyGainRate ~  s(StdLength) + s(fYear, bs='re'), data=PMMdlData, na.action = "na.fail")
summary(EGRmdl)
gam.check(EGRmdl)
plot(EGRmdl)
dredge(EGRmdl)
draw(EGRmdl, residuals = TRUE)
summary(EGRmdl)
draw(EGRmdl, residuals = TRUE)
MGRmdl <- gam(MassGainRate ~ s(GGBMode, k=12)+ s(GGBIQR, k=12) + s(StdLength, k=12)  + s(fYear, bs='re') + s(SealID, bs='re') , data=PMMdlData, na.action = "na.fail")
summary(MGRmdl)
gam.check(MGRmdl)
plot(MGRmdl)
dredge(MGRmdl)
MGRmdl <- gam(MassGainRate ~ s(GGBIQR, k=6) + s(StdLength, k=6) + s(fYear, bs='re'), data=PMMdlData, na.action = "na.fail")
summary(MGRmdl)
gam.check(MGRmdl)
plot(MGRmdl)
dredge(MGRmdl)
draw(MGRmdl,residuals = TRUE)
MGR_pm_obj<-plot(MGRmdl,residuals=TRUE,rug=TRUE,se=TRUE,pages=0,select=1,scale=0,
n=500,n2=40,n3=3,theta=30,phi=30,jit=FALSE,xlab=NULL,
ylab=NULL,main=NULL,ylim=NULL,xlim=NULL,too.far=0.1,
all.terms=FALSE,shade=TRUE,shade.col="gray80",shift=coef(MGRmdl)[1],
trans=I,seWithMean=FALSE,unconditional=FALSE,by.resids=FALSE,
scheme=0)
MGR_pm_obj <- MGR_pm_obj[[1]] # just one smooth so select the first component
MGR_pm_df <- as.data.frame(MGR_pm_obj[c("x", "se", "fit")])
MGR_pm_df <- MGR_pm_df %>%
rename(GGBIQR = x) %>%
mutate(fit = fit + coef(MGRmdl)[1])
mdldata2<-subset(Track_Stats, Season == 'Post-Molting' & !is.na(TotEnergyRate))
MGRmdl <- gam(TotEnergyRate ~ s(GGBMode, k=12)+ s(GGBIQR, k=12)+ s(StdLength, bs='re') + s(fYear, bs='re') + s(SealID, bs='re') , data=PMMdlData, na.action = "na.fail")
EGRPB_Scatter<-ggplot()+
geom_point(data=subset(PBMdlData), aes(y=EnergyGainRate, x=GGBMed)) +
# scale_x_continuous(expand = c(0, 0)) +
# scale_y_continuous(expand = c(0, 0)) +
scale_color_manual("Year",values=natparks.pals("Acadia",17))+
scale_fill_manual("Year",values=natparks.pals("Acadia",17))+
geom_rug(data = PBMdlData, mapping = aes(x = GGBMed, y = NULL),
sides = "b") +
geom_ribbon(data=EGR_pb_df, aes(ymin = fit - se, ymax = fit + se, y = NULL, x = GGBMed),
alpha = 0.5) +
geom_line(data=EGR_pb_df, aes(x=GGBMed, y=fit), linewidth=1) +
#geom_hline(data=subset(medians, Season=="Post-Breeding"), aes(yintercept=DielDiff), size=1, linetype='dashed', color='black') +
# annotate("text", x=1450, y=700, label= "Day Deeper than Night") +
# annotate("text", x =1450, y=-450, label = "Night Deeper than Day")+
# xlim(-1000,1800)+
# ylim(-550,825)+
labs(x="Median Distance from SAFZ (km)",y="Energy Gain Rate (MJ/day)", fill = "Count")+
ggthemes::theme_few()+
theme(panel.grid.major = element_line(linewidth=0.3, colour="grey", linetype = "dashed"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 16),
strip.text = element_text(size=14))
EGRPB_Scatter<-ggplot()+
geom_point(data=subset(PBMdlData), aes(y=EnergyGainRate, x=GGBMode)) +
# scale_x_continuous(expand = c(0, 0)) +
# scale_y_continuous(expand = c(0, 0)) +
scale_color_manual("Year",values=natparks.pals("Acadia",17))+
scale_fill_manual("Year",values=natparks.pals("Acadia",17))+
geom_rug(data = PBMdlData, mapping = aes(x = GGBMed, y = NULL),
sides = "b") +
geom_ribbon(data=EGR_pb_df, aes(ymin = fit - se, ymax = fit + se, y = NULL, x = GGBMed),
alpha = 0.5) +
geom_line(data=EGR_pb_df, aes(x=GGBMed, y=fit), linewidth=1) +
#geom_hline(data=subset(medians, Season=="Post-Breeding"), aes(yintercept=DielDiff), size=1, linetype='dashed', color='black') +
# annotate("text", x=1450, y=700, label= "Day Deeper than Night") +
# annotate("text", x =1450, y=-450, label = "Night Deeper than Day")+
# xlim(-1000,1800)+
# ylim(-550,825)+
labs(x="Median Distance from SAFZ (km)",y="Energy Gain Rate (MJ/day)", fill = "Count")+
ggthemes::theme_few()+
theme(panel.grid.major = element_line(linewidth=0.3, colour="grey", linetype = "dashed"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 16),
strip.text = element_text(size=14))
EGRPB_Scatter
EGRmdl <- gam(EnergyGainRate ~ s(GGBMode, k=6) + s(fYear, bs='re'), data=PBMdlData, na.action = "na.fail",method="REML")
summary(EGRmdl)
gam.check(EGRmdl)
plot(EGRmdl)
dredge(EGRmdl)
draw(EGRmdl,residuals=TRUE)
EGR_pb_obj<-plot(EGRmdl,residuals=TRUE,rug=TRUE,se=TRUE,pages=0,select=1,scale=0,
n=500,n2=40,n3=3,theta=30,phi=30,jit=FALSE,xlab=NULL,
ylab=NULL,main=NULL,ylim=NULL,xlim=NULL,too.far=0.1,
all.terms=FALSE,shade=TRUE,shade.col="gray80",shift=coef(EGRmdl)[1],
trans=I,seWithMean=FALSE,unconditional=FALSE,by.resids=FALSE,
scheme=0)
EGR_pb_obj2<-plot(EGRmdl,residuals=TRUE,rug=TRUE,se=TRUE,pages=0,select=2,scale=0,
n=500,n2=40,n3=3,theta=30,phi=30,jit=FALSE,xlab=NULL,
ylab=NULL,main=NULL,ylim=NULL,xlim=NULL,too.far=0.1,
all.terms=FALSE,shade=TRUE,shade.col="gray80",shift=coef(EGRmdl)[2],
trans=I,seWithMean=FALSE,unconditional=FALSE,by.resids=FALSE,
scheme=0)
EGR_pb_obj <- EGR_pb_obj[[1]] # just one smooth so select the first component
EGR_pb_df <- as.data.frame(EGR_pb_obj[c("x", "se", "fit")])
EGR_pb_df <- EGR_pb_df %>%
rename(GGBMode = x) %>%
mutate(fit = fit + coef(EGRmdl)[1])
EGRPB_Scatter<-ggplot()+
geom_point(data=subset(PBMdlData), aes(y=EnergyGainRate, x=GGBMode)) +
# scale_x_continuous(expand = c(0, 0)) +
# scale_y_continuous(expand = c(0, 0)) +
scale_color_manual("Year",values=natparks.pals("Acadia",17))+
scale_fill_manual("Year",values=natparks.pals("Acadia",17))+
geom_rug(data = PBMdlData, mapping = aes(x = GGBMode, y = NULL),
sides = "b") +
geom_ribbon(data=EGR_pb_df, aes(ymin = fit - se, ymax = fit + se, y = NULL, x = GGBMode),
alpha = 0.5) +
geom_line(data=EGR_pb_df, aes(x=GGBMode, y=fit), linewidth=1) +
#geom_hline(data=subset(medians, Season=="Post-Breeding"), aes(yintercept=DielDiff), size=1, linetype='dashed', color='black') +
# annotate("text", x=1450, y=700, label= "Day Deeper than Night") +
# annotate("text", x =1450, y=-450, label = "Night Deeper than Day")+
# xlim(-1000,1800)+
# ylim(-550,825)+
labs(x="Median Distance from SAFZ (km)",y="Energy Gain Rate (MJ/day)", fill = "Count")+
ggthemes::theme_few()+
theme(panel.grid.major = element_line(linewidth=0.3, colour="grey", linetype = "dashed"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 16),
strip.text = element_text(size=14))
EGRPB_Scatter
EGRPB_Scatter<-ggplot()+
geom_point(data=subset(PBMdlData), aes(y=EnergyGainRate, x=GGBMode)) +
# scale_x_continuous(expand = c(0, 0)) +
# scale_y_continuous(expand = c(0, 0)) +
scale_color_manual("Year",values=natparks.pals("Acadia",17))+
scale_fill_manual("Year",values=natparks.pals("Acadia",17))+
geom_rug(data = PBMdlData, mapping = aes(x = GGBMode, y = NULL),
sides = "b") +
geom_ribbon(data=EGR_pb_df, aes(ymin = fit - se, ymax = fit + se, y = NULL, x = GGBMode),
alpha = 0.5) +
geom_line(data=EGR_pb_df, aes(x=GGBMode, y=fit), linewidth=1) +
#geom_hline(data=subset(medians, Season=="Post-Breeding"), aes(yintercept=DielDiff), size=1, linetype='dashed', color='black') +
# annotate("text", x=1450, y=700, label= "Day Deeper than Night") +
# annotate("text", x =1450, y=-450, label = "Night Deeper than Day")+
# xlim(-1000,1800)+
# ylim(-550,825)+
labs(x="Mode of Distance from SAFZ (km)",y="Energy Gain Rate (MJ/day)", fill = "Count")+
ggthemes::theme_few()+
theme(panel.grid.major = element_line(linewidth=0.3, colour="grey", linetype = "dashed"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 16),
strip.text = element_text(size=14))
EGRPB_Scatter
ggsave("Figures/EGR_Mdl_PB.png", width = 8, height = 4, units = "in", dpi=600)
install.packages("zoo")
install.packages(c("ggplot2", "ggstats"))
install.packages(c("bayestestR", "ggeffects"))
install.packages("ade4")
install.packages(c("knitr", "lme4"))
install.packages(c("MuMIn", "ncdf4"))
install.packages("purrr")
install.packages(c("sf", "sp", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.random", "spatstat.univar", "spatstat.utils"))
install.packages(c("bit", "broom", "broom.helpers", "bslib", "cards", "cli", "commonmark", "cpp11", "curl", "diffobj", "doBy", "emmeans", "fs", "future", "generics", "gert", "globals", "GPArotation", "httpuv", "httr2", "igraph", "jpeg", "jsonlite", "labelled", "later", "MatrixModels", "mime", "miniUI", "multcomp", "networkD3", "nloptr", "odbc", "openssl", "parallelly", "parameters", "pbkrtest", "pillar", "pkgbuild", "pkgdown", "processx", "PROJ", "proj4", "ps", "psych", "qgam", "quantmod", "quantreg", "R6", "ragg", "raster", "RcppArmadillo", "RcppParallel", "RcppZiggurat", "Rdpack", "readxl", "reformulas", "Rfast", "rgl", "rlang", "rms", "s2", "sass", "scales", "SciViews", "sessioninfo", "stringi", "systemfonts", "terra", "textshaping", "tinytable", "tinytex", "TMB", "tzdb", "units", "utf8", "xml2", "zip"))
install.packages("cli")
```{r Load Libraries, echo=FALSE}
rm(list=ls())
library(tidyverse)
library(ggExtra)
library(ggspatial)
library(NatParksPalettes)
library(ggridges)
library(scales)
library(sf)
library(maps)
```
# Seal Tracks for map
Daily<-read.csv('Data/Daily_SAFZDist.csv')
Tracks<-read.csv('Data/Tracks_SAFZDist.csv')
All_Females<-read.csv('Data/NES_All_Individuals.csv')
All_Females <- All_Females %>%
select(c(TOPPID,SealID,Year,Season,Colony,TripLength,SkipBreed,PctBathy1200,MedDistCoast))
write.csv(All_Females, "NES_All_Individuals.csv", row.names = FALSE)
setwd("D:/Dropbox/GitHub/NES_SAFZ")
write.csv(All_Females, "NES_All_Individuals.csv", row.names = FALSE)
Daily <- Daily %>%
select(-c(NumDives, MaxDepth, MeanDepth, Duration, DayDuration, DayBottTime, DayPDI, NightDuration,
NightBottTime, NightPDI, DriftRate, TransitRate, TransitRateVar))
Daily <- Daily %>%
select(-c(NumDives, MaxDepth, MeanDepth, Duration, DayDuration, DayBottTime, DayPDI, NightDuration,
NightBottTime, NightPDI, DriftRate, TransitRate, TransitRateVar, PDI))
Daily <- Daily %>%
select(-c(PDI))
Daily <- Daily %>%
select(-c(BottTime))
Tracks <- Tracks %>%
select(-c(TransitRate,DistFromHome,SumHorzDist))
write.csv(Tracks, "Tracks_SAFZDist.csv", row.names = FALSE)
write.csv(Daily, "Daily_SAFZDist.csv", row.names = FALSE)
library(tidyverse)
library(ggExtra)
library(scico)
library(NatParksPalettes)
library(mgcv)
library(MuMIn)
library(lmtest)
library(gratia)
Daily<-read.csv('Data/Daily_SAFZDist.csv')
SAFZ_Pct<-read.csv('Data/SAFZ_Pct.csv')
Tracks<-read.csv('Data/Tracks_SAFZDist.csv')
All_Females<-read.csv('Data/NES_All_Individuals.csv')
SAFZ_Pct <- SAFZ_Pct %>%
# Convert to factors
mutate(across(c('SealID','TOPPID','Colony','Season'),as.factor))
All_Females<- All_Females %>%
#Exclude manipulated females
filter(!TOPPID %in% c(2017001, 2009019, 2009020, 2009023)) %>%
#Convert variables to factors and standardize skip breeding categories
mutate(fYear = as.factor(Year),
Season = as.factor(Season),
TOPPID = as.factor(TOPPID),
SkipBreed = ifelse(is.na(SkipBreed) | SkipBreed == "", "Non-Breed", SkipBreed),
SkipBreed = ifelse(SkipBreed == "SkipL" | SkipBreed == "SkipP"| SkipBreed == "skip", "Skip", SkipBreed),
SkipBreed = as.factor(SkipBreed))
Daily <- Daily %>%
# Only keep trips with QC of 1 or 2
filter(TrackQC <= 3) %>%
# Remove manipulated or sick animals
filter(!TOPPID %in% c(2017001, 2009019, 2009020, 2009023)) %>%
# Convert to factors
mutate(across(c('SealID','TOPPID','Skip','Colony','Season'),as.factor),
# Add a 360 degree longitude column
Lon360 = case_when(Lon<0 ~ Lon+360,
TRUE ~ Lon),
# Calculate difference between median day and night depths
DielDiff = DayDepth - NightDepth,
DielDiffAbs = abs(DielDiff),
LatDist = (Lat-43)*111) %>%
left_join(select(SAFZ_Pct, TOPPID, Pct250km), by = "TOPPID")
Tracks<-Tracks %>%
# Convert to factors
mutate(across(c('SealID','TOPPID','Skip','Colony','Season'),as.factor)) %>%
# Add SAFZ values to tracks
left_join(select(SAFZ_Pct, TOPPID, Pct250km), by = "TOPPID")%>%
# Add Stats from All Females to Tracks
left_join(select(All_Females, TOPPID, TripLength, PctBathy1200, MedDistCoast), by = "TOPPID") %>%
# Exclude low-quality tracks
filter(QCFlag<4) %>%
group_by(TOPPID) %>%
# filter(max(DayOfTrip) >= 30) %>%
mutate(Year = first(Year),
PctTrip = max(DayOfTripR)/max(TripLength)) %>%
ungroup() %>%
#Only include tracks lasting more than 60% of time at sea
filter(PctTrip>0.6 | is.na(PctTrip)) %>%
# Calculate distance from 43 degrees latitude for each location estimate
mutate(LatDist = (Lat-43)*111,
fYear = as.factor(Year),
# Drop excess seal and TOPPID levels
TOPPID = droplevels(TOPPID),
SealID = droplevels(SealID))
# Compute density data separately for each TOPPID
dens_data_TOPPID <- Tracks %>%
filter(Lon360 < 230) %>%
group_by(TOPPID) %>%
summarise(density = list(density(GGBDist)), .groups = "drop") %>%
mutate(x = purrr::map(density, "x"),  # Extract 'x' values from density object
y = purrr::map(density, "y")) %>% # Extract 'y' values from density object
select(TOPPID, x, y) %>%
unnest(cols = c(x, y)) # Unnest the density data
# Find the largest maximum (global peak) for each group
dens_maxima_TOPPID <- dens_data_TOPPID %>%
group_by(TOPPID) %>%
slice_max(y, n = 1) %>% # Select the row with the highest density value
select(TOPPID, x) %>%
rename(GGBMode = x)
Track_Stats <- Tracks %>%
filter(Lon360<230) %>%
group_by(TOPPID) %>%
summarize(GGBMed = median(GGBDist),
GGBMAD = mad(GGBDist),
GGBIQR = IQR(GGBDist),
SealID = first(SealID),
EnergyGainRate = first(EnergyGainRate),
Season = first(Season),
Skip = first(Skip),
StdLength = first(StdLength),
Year = first(Year),
fYear = first(fYear),
Pct250km = first(Pct250km)) %>%
filter(!is.na(EnergyGainRate)) %>%
#filter(Pct250km > 0.10) %>%
left_join(select(dens_maxima_TOPPID,TOPPID,GGBMode),by="TOPPID") %>%
filter(!is.na(EnergyGainRate))
# Model seasons separately, include both reproductive and skip breeding females in PM model
PBMdlData<-subset(Track_Stats, Season == 'Post-Breeding')
PMMdlData<-subset(Track_Stats, Season == 'Post-Molting')
EGRhist <- ggplot(data=Track_Stats, aes(x=EnergyGainRate)) +
geom_histogram()+
facet_wrap(~Season)
EGRhist
PB_EGRmdl1 <- gam(EnergyGainRate ~ s(GGBMode, k=6) + StdLength + s(fYear, bs='re'), data=PBMdlData, na.action = "na.fail", method="REML")
summary(PB_EGRmdl1)
gam.check(PB_EGRmdl1)
# Pull out gam smoothers for plotting later
PB_EGRmdl1_plot <- gam(EnergyGainRate ~ s(GGBMode, k=6) + s(StdLength, k=2) + s(fYear, bs='re'), data=PBMdlData, na.action = "na.fail", method="REML")
draw(PB_EGRmdl1_plot,residuals=TRUE)
EGR_pb_obj<-plot(PB_EGRmdl1_plot,residuals=TRUE,rug=TRUE,se=TRUE,pages=0,select=1,scale=0,
n=500,n2=40,n3=3,theta=30,phi=30,jit=FALSE,xlab=NULL,
ylab=NULL,main=NULL,ylim=NULL,xlim=NULL,too.far=0.1,
all.terms=FALSE,shade=TRUE,shade.col="gray80",shift=coef(PB_EGRmdl1_plot)[1],
trans=I,seWithMean=FALSE,unconditional=FALSE,by.resids=FALSE,
scheme=0)
EGR_pb_ggb <- EGR_pb_obj[[1]] # just one smooth so select the first component
EGR_pb_df <- as.data.frame(EGR_pb_ggb[c("x", "se", "fit")])
EGR_pb_df <- EGR_pb_df %>%
rename(GGBMode = x) %>%
mutate(fit = fit + coef(PB_EGRmdl1_plot)[1])
EGR_pb_stdl <- EGR_pb_obj[[2]] # just one smooth so select the first component
EGR_pb_df2 <- as.data.frame(EGR_pb_stdl[c("x", "se", "fit")])
EGR_pb_df2 <- EGR_pb_df2 %>%
rename(StdLength = x) %>%
mutate(fit = fit + coef(PB_EGRmdl1_plot)[1])
